{"version":3,"file":"index.js","sources":["../../../cep.config.ts","../../../src/shared/shared.ts","../../../src/jsx/utils/samples.ts","../../../src/jsx/aeft/aeft.ts","../../../src/jsx/ilst/ilst.ts","../../../src/jsx/anim/anim.ts","../../../src/js/lib/csinterface.js","../../../src/js/lib/node.ts","../../../src/js/lib/config.ts","../../../src/jsx/ppro/batch.ts","../../../src/jsx/ppro/ppro.ts","../../../src/jsx/phxs/phxs.ts","../../../src/jsx/index.ts"],"sourcesContent":["import { CEP_Config } from \"vite-cep-plugin\";\r\nimport { version } from \"./package.json\";\r\n\r\n\r\nconst config: CEP_Config = {\r\n    version,\r\n    id: \"com.bolt.cep\",\r\n    displayName: \"Bolt CEP\",\r\n    symlink: \"local\",\r\n    port: 3010,\r\n    servePort: 5000,\r\n    startingDebugPort: 8860,\r\n    extensionManifestVersion: 6.0,\r\n    requiredRuntimeVersion: 9.0,\r\n    hosts: [\r\n        {\r\n            name: \"AEFT\",\r\n            version: \"[0.0,99.9]\",\r\n        },\r\n        {\r\n            name: \"PPRO\",\r\n            version: \"[0.0,99.9]\",\r\n        },\r\n        {\r\n            name: \"ILST\",\r\n            version: \"[0.0,99.9]\",\r\n        },\r\n        {\r\n            name: \"PHXS\",\r\n            version: \"[0.0,99.9]\",\r\n        },\r\n        {\r\n            name: \"FLPR\",\r\n            version: \"[0.0,99.9]\",\r\n        },\r\n    ],\r\n\r\n    type: \"Panel\",\r\n    iconDarkNormal: \"./src/assets/light-icon.png\",\r\n    iconNormal: \"./src/assets/dark-icon.png\",\r\n    iconDarkNormalRollOver: \"./src/assets/light-icon.png\",\r\n    iconNormalRollOver: \"./src/assets/dark-icon.png\",\r\n    parameters: [\"--v=0\", \"--enable-nodejs\", \"--mixed-context\"],\r\n    width: 500,\r\n    height: 550,\r\n\r\n    panels: [\r\n        {\r\n            mainPath: \"./main/index.html\",\r\n            name: \"main\",\r\n            panelDisplayName: \"Bolt CEP\",\r\n            autoVisible: true,\r\n            width: 600,\r\n            height: 650,\r\n        },\r\n\r\n    ],\r\n    build: {\r\n        jsxBin: \"off\", // \"off\" | \"copy\" | \"replace\";\r\n        sourceMap: true,\r\n    },\r\n    zxp: {\r\n        country: \"US\",\r\n        province: \"CA\",\r\n        org: \"MyCompany\",\r\n        password: \"mypassword\",\r\n        tsa: \"http://timestamp.digicert.com/\",\r\n        sourceMap: false,\r\n        jsxBin: \"off\",\r\n    },\r\n    installModules: [],\r\n    copyAssets: [\"public\"],\r\n    copyZipAssets: [],\r\n};\r\nexport default config;\r\n","import config from \"../../cep.config\";\r\nexport const ns = config.id;\r\n","export const helloError = (str: string) => {\r\n    // Intentional Error for Error Handling Demonstration\r\n    //@ts-ignore\r\n    str = strr;\r\n};\r\n\r\nexport const openProjFolder = () => { };\r\nexport const helloNum = (n: number) => {\r\n    alert(`ExtendScript received a number: ${n.toString()}`);\r\n    return n;\r\n};\r\nexport const helloArrayStr = (arr: string[]) => {\r\n    alert(\r\n        `ExtendScript received an array of ${arr.length} strings: ${arr.toString()}`\r\n    );\r\n    return arr;\r\n};\r\nexport const helloObj = (obj: { height: number; width: number }) => {\r\n    alert(`ExtendScript received an object: ${JSON.stringify(obj)}`);\r\n    return {\r\n        y: obj.height,\r\n        x: obj.width,\r\n    };\r\n};\r\n","import {\r\n    helloError,\r\n    helloNum,\r\n    helloArrayStr,\r\n    helloObj,\r\n} from \"../utils/samples\";\r\nexport { helloError, helloNum, helloArrayStr, helloObj };\r\n\r\nexport const helloWorld = () => {\r\n    alert(\"Hello from After Effects!\");\r\n    app.project.activeItem;\r\n};\r\n","import {\r\n    helloError,\r\n    helloNum,\r\n    helloArrayStr,\r\n    helloObj,\r\n} from \"../utils/samples\";\r\nexport { helloError, helloNum, helloArrayStr, helloObj };\r\n\r\nexport const helloWorld = () => {\r\n    alert(\"Hello from Illustrator\");\r\n    app.activeDocument.path;\r\n};\r\n","export const helloWorld = () => {\r\n  alert(\"Hello from Animate\");\r\n  document.path;\r\n};\r\n","/**************************************************************************************************\r\n *\r\n * ADOBE SYSTEMS INCORPORATED\r\n * Copyright 2020 Adobe Systems Incorporated\r\n * All Rights Reserved.\r\n *\r\n * NOTICE:  Adobe permits you to use, modify, and distribute this file in accordance with the\r\n * terms of the Adobe license agreement accompanying it.  If you have received this file from a\r\n * source other than Adobe, then your use, modification, or distribution of it requires the prior\r\n * written permission of Adobe.\r\n *\r\n **************************************************************************************************/\r\n\r\n/** CSInterface - v11.0.0 */\r\n\r\n/**\r\n * Stores constants for the window types supported by the CSXS infrastructure.\r\n */\r\nfunction CSXSWindowType() { }\r\n\r\n/** Constant for the CSXS window type Panel. */\r\nCSXSWindowType._PANEL = \"Panel\";\r\n\r\n/** Constant for the CSXS window type Modeless. */\r\nCSXSWindowType._MODELESS = \"Modeless\";\r\n\r\n/** Constant for the CSXS window type ModalDialog. */\r\nCSXSWindowType._MODAL_DIALOG = \"ModalDialog\";\r\n\r\n/** EvalScript error message */\r\nlet EvalScript_ErrMessage = \"EvalScript error.\";\r\n\r\n/**\r\n * @class Version\r\n * Defines a version number with major, minor, micro, and special\r\n * components. The major, minor and micro values are numeric; the special\r\n * value can be any string.\r\n *\r\n * @param major   The major version component, a positive integer up to nine digits long.\r\n * @param minor   The minor version component, a positive integer up to nine digits long.\r\n * @param micro   The micro version component, a positive integer up to nine digits long.\r\n * @param special The special version component, an arbitrary string.\r\n *\r\n * @return A new \\c Version object.\r\n */\r\nfunction Version(major, minor, micro, special) {\r\n    this.major = major;\r\n    this.minor = minor;\r\n    this.micro = micro;\r\n    this.special = special;\r\n}\r\n\r\n/**\r\n * The maximum value allowed for a numeric version component.\r\n * This reflects the maximum value allowed in PlugPlug and the manifest schema.\r\n */\r\nVersion.MAX_NUM = 999999999;\r\n\r\n/**\r\n * @class VersionBound\r\n * Defines a boundary for a version range, which associates a \\c Version object\r\n * with a flag for whether it is an inclusive or exclusive boundary.\r\n *\r\n * @param version   The \\c #Version object.\r\n * @param inclusive True if this boundary is inclusive, false if it is exclusive.\r\n *\r\n * @return A new \\c VersionBound object.\r\n */\r\nfunction VersionBound(version, inclusive) {\r\n    this.version = version;\r\n    this.inclusive = inclusive;\r\n}\r\n\r\n/**\r\n * @class VersionRange\r\n * Defines a range of versions using a lower boundary and optional upper boundary.\r\n *\r\n * @param lowerBound The \\c #VersionBound object.\r\n * @param upperBound The \\c #VersionBound object, or null for a range with no upper boundary.\r\n *\r\n * @return A new \\c VersionRange object.\r\n */\r\nfunction VersionRange(lowerBound, upperBound) {\r\n    this.lowerBound = lowerBound;\r\n    this.upperBound = upperBound;\r\n}\r\n\r\n/**\r\n * @class Runtime\r\n * Represents a runtime related to the CEP infrastructure.\r\n * Extensions can declare dependencies on particular\r\n * CEP runtime versions in the extension manifest.\r\n *\r\n * @param name    The runtime name.\r\n * @param version A \\c #VersionRange object that defines a range of valid versions.\r\n *\r\n * @return A new \\c Runtime object.\r\n */\r\nfunction Runtime(name, versionRange) {\r\n    this.name = name;\r\n    this.versionRange = versionRange;\r\n}\r\n\r\n/**\r\n * @class Extension\r\n * Encapsulates a CEP-based extension to an Adobe application.\r\n *\r\n * @param id              The unique identifier of this extension.\r\n * @param name            The localizable display name of this extension.\r\n * @param mainPath        The path of the \"index.html\" file.\r\n * @param basePath        The base path of this extension.\r\n * @param windowType          The window type of the main window of this extension.\r\n                  Valid values are defined by \\c #CSXSWindowType.\r\n * @param width           The default width in pixels of the main window of this extension.\r\n * @param height          The default height in pixels of the main window of this extension.\r\n * @param minWidth        The minimum width in pixels of the main window of this extension.\r\n * @param minHeight       The minimum height in pixels of the main window of this extension.\r\n * @param maxWidth        The maximum width in pixels of the main window of this extension.\r\n * @param maxHeight       The maximum height in pixels of the main window of this extension.\r\n * @param defaultExtensionDataXml The extension data contained in the default \\c ExtensionDispatchInfo section of the extension manifest.\r\n * @param specialExtensionDataXml The extension data contained in the application-specific \\c ExtensionDispatchInfo section of the extension manifest.\r\n * @param requiredRuntimeList     An array of \\c Runtime objects for runtimes required by this extension.\r\n * @param isAutoVisible       True if this extension is visible on loading.\r\n * @param isPluginExtension   True if this extension has been deployed in the Plugins folder of the host application.\r\n *\r\n * @return A new \\c Extension object.\r\n */\r\nfunction Extension(\r\n    id,\r\n    name,\r\n    mainPath,\r\n    basePath,\r\n    windowType,\r\n    width,\r\n    height,\r\n    minWidth,\r\n    minHeight,\r\n    maxWidth,\r\n    maxHeight,\r\n    defaultExtensionDataXml,\r\n    specialExtensionDataXml,\r\n    requiredRuntimeList,\r\n    isAutoVisible,\r\n    isPluginExtension\r\n) {\r\n    this.id = id;\r\n    this.name = name;\r\n    this.mainPath = mainPath;\r\n    this.basePath = basePath;\r\n    this.windowType = windowType;\r\n    this.width = width;\r\n    this.height = height;\r\n    this.minWidth = minWidth;\r\n    this.minHeight = minHeight;\r\n    this.maxWidth = maxWidth;\r\n    this.maxHeight = maxHeight;\r\n    this.defaultExtensionDataXml = defaultExtensionDataXml;\r\n    this.specialExtensionDataXml = specialExtensionDataXml;\r\n    this.requiredRuntimeList = requiredRuntimeList;\r\n    this.isAutoVisible = isAutoVisible;\r\n    this.isPluginExtension = isPluginExtension;\r\n}\r\n\r\n/**\r\n * @class CSEvent\r\n * A standard JavaScript event, the base class for CEP events.\r\n *\r\n * @param type        The name of the event type.\r\n * @param scope       The scope of event, can be \"GLOBAL\" or \"APPLICATION\".\r\n * @param appId       The unique identifier of the application that generated the event.\r\n * @param extensionId     The unique identifier of the extension that generated the event.\r\n *\r\n * @return A new \\c CSEvent object\r\n */\r\nfunction CSEvent(type, scope, appId, extensionId) {\r\n    this.type = type;\r\n    this.scope = scope;\r\n    this.appId = appId;\r\n    this.extensionId = extensionId;\r\n}\r\n\r\n/** Event-specific data. */\r\nCSEvent.prototype.data = \"\";\r\n\r\n/**\r\n * @class SystemPath\r\n * Stores operating-system-specific location constants for use in the\r\n * \\c #CSInterface.getSystemPath() method.\r\n * @return A new \\c SystemPath object.\r\n */\r\nfunction SystemPath() { }\r\n\r\n/** The path to user data.  */\r\nSystemPath.USER_DATA = \"userData\";\r\n\r\n/** The path to common files for Adobe applications.  */\r\nSystemPath.COMMON_FILES = \"commonFiles\";\r\n\r\n/** The path to the user's default document folder.  */\r\nSystemPath.MY_DOCUMENTS = \"myDocuments\";\r\n\r\n/** @deprecated. Use \\c #SystemPath.Extension.  */\r\nSystemPath.APPLICATION = \"application\";\r\n\r\n/** The path to current extension.  */\r\nSystemPath.EXTENSION = \"extension\";\r\n\r\n/** The path to hosting application's executable.  */\r\nSystemPath.HOST_APPLICATION = \"hostApplication\";\r\n\r\n/**\r\n * @class ColorType\r\n * Stores color-type constants.\r\n */\r\nfunction ColorType() { }\r\n\r\n/** RGB color type. */\r\nColorType.RGB = \"rgb\";\r\n\r\n/** Gradient color type. */\r\nColorType.GRADIENT = \"gradient\";\r\n\r\n/** Null color type. */\r\nColorType.NONE = \"none\";\r\n\r\n/**\r\n * @class RGBColor\r\n * Stores an RGB color with red, green, blue, and alpha values.\r\n * All values are in the range [0.0 to 255.0]. Invalid numeric values are\r\n * converted to numbers within this range.\r\n *\r\n * @param red   The red value, in the range [0.0 to 255.0].\r\n * @param green The green value, in the range [0.0 to 255.0].\r\n * @param blue  The blue value, in the range [0.0 to 255.0].\r\n * @param alpha The alpha (transparency) value, in the range [0.0 to 255.0].\r\n *      The default, 255.0, means that the color is fully opaque.\r\n *\r\n * @return A new RGBColor object.\r\n */\r\nfunction RGBColor(red, green, blue, alpha) {\r\n    this.red = red;\r\n    this.green = green;\r\n    this.blue = blue;\r\n    this.alpha = alpha;\r\n}\r\n\r\n/**\r\n * @class Direction\r\n * A point value  in which the y component is 0 and the x component\r\n * is positive or negative for a right or left direction,\r\n * or the x component is 0 and the y component is positive or negative for\r\n * an up or down direction.\r\n *\r\n * @param x     The horizontal component of the point.\r\n * @param y     The vertical component of the point.\r\n *\r\n * @return A new \\c Direction object.\r\n */\r\nfunction Direction(x, y) {\r\n    this.x = x;\r\n    this.y = y;\r\n}\r\n\r\n/**\r\n * @class GradientStop\r\n * Stores gradient stop information.\r\n *\r\n * @param offset   The offset of the gradient stop, in the range [0.0 to 1.0].\r\n * @param rgbColor The color of the gradient at this point, an \\c #RGBColor object.\r\n *\r\n * @return GradientStop object.\r\n */\r\nfunction GradientStop(offset, rgbColor) {\r\n    this.offset = offset;\r\n    this.rgbColor = rgbColor;\r\n}\r\n\r\n/**\r\n  * @class GradientColor\r\n  * Stores gradient color information.\r\n  *\r\n  * @param type          The gradient type, must be \"linear\".\r\n  * @param direction     A \\c #Direction object for the direction of the gradient\r\n                 (up, down, right, or left).\r\n  * @param numStops          The number of stops in the gradient.\r\n  * @param gradientStopList  An array of \\c #GradientStop objects.\r\n  *\r\n  * @return A new \\c GradientColor object.\r\n  */\r\nfunction GradientColor(type, direction, numStops, arrGradientStop) {\r\n    this.type = type;\r\n    this.direction = direction;\r\n    this.numStops = numStops;\r\n    this.arrGradientStop = arrGradientStop;\r\n}\r\n\r\n/**\r\n  * @class UIColor\r\n  * Stores color information, including the type, anti-alias level, and specific color\r\n  * values in a color object of an appropriate type.\r\n  *\r\n  * @param type          The color type, 1 for \"rgb\" and 2 for \"gradient\".\r\n                 The supplied color object must correspond to this type.\r\n  * @param antialiasLevel    The anti-alias level constant.\r\n  * @param color         A \\c #RGBColor or \\c #GradientColor object containing specific color information.\r\n  *\r\n  * @return A new \\c UIColor object.\r\n  */\r\nfunction UIColor(type, antialiasLevel, color) {\r\n    this.type = type;\r\n    this.antialiasLevel = antialiasLevel;\r\n    this.color = color;\r\n}\r\n\r\n/**\r\n * @class AppSkinInfo\r\n * Stores window-skin properties, such as color and font. All color parameter values are \\c #UIColor objects except that systemHighlightColor is \\c #RGBColor object.\r\n *\r\n * @param baseFontFamily        The base font family of the application.\r\n * @param baseFontSize          The base font size of the application.\r\n * @param appBarBackgroundColor     The application bar background color.\r\n * @param panelBackgroundColor      The background color of the extension panel.\r\n * @param appBarBackgroundColorSRGB     The application bar background color, as sRGB.\r\n * @param panelBackgroundColorSRGB      The background color of the extension panel, as sRGB.\r\n * @param systemHighlightColor          The highlight color of the extension panel, if provided by the host application. Otherwise, the operating-system highlight color.\r\n *\r\n * @return AppSkinInfo object.\r\n */\r\nfunction AppSkinInfo(\r\n    baseFontFamily,\r\n    baseFontSize,\r\n    appBarBackgroundColor,\r\n    panelBackgroundColor,\r\n    appBarBackgroundColorSRGB,\r\n    panelBackgroundColorSRGB,\r\n    systemHighlightColor\r\n) {\r\n    this.baseFontFamily = baseFontFamily;\r\n    this.baseFontSize = baseFontSize;\r\n    this.appBarBackgroundColor = appBarBackgroundColor;\r\n    this.panelBackgroundColor = panelBackgroundColor;\r\n    this.appBarBackgroundColorSRGB = appBarBackgroundColorSRGB;\r\n    this.panelBackgroundColorSRGB = panelBackgroundColorSRGB;\r\n    this.systemHighlightColor = systemHighlightColor;\r\n}\r\n\r\n/**\r\n * @class HostEnvironment\r\n * Stores information about the environment in which the extension is loaded.\r\n *\r\n * @param appName   The application's name.\r\n * @param appVersion    The application's version.\r\n * @param appLocale The application's current license locale.\r\n * @param appUILocale   The application's current UI locale.\r\n * @param appId     The application's unique identifier.\r\n * @param isAppOnline  True if the application is currently online.\r\n * @param appSkinInfo   An \\c #AppSkinInfo object containing the application's default color and font styles.\r\n *\r\n * @return A new \\c HostEnvironment object.\r\n */\r\nfunction HostEnvironment(\r\n    appName,\r\n    appVersion,\r\n    appLocale,\r\n    appUILocale,\r\n    appId,\r\n    isAppOnline,\r\n    appSkinInfo\r\n) {\r\n    this.appName = appName;\r\n    this.appVersion = appVersion;\r\n    this.appLocale = appLocale;\r\n    this.appUILocale = appUILocale;\r\n    this.appId = appId;\r\n    this.isAppOnline = isAppOnline;\r\n    this.appSkinInfo = appSkinInfo;\r\n}\r\n\r\n/**\r\n * @class HostCapabilities\r\n * Stores information about the host capabilities.\r\n *\r\n * @param EXTENDED_PANEL_MENU True if the application supports panel menu.\r\n * @param EXTENDED_PANEL_ICONS True if the application supports panel icon.\r\n * @param DELEGATE_APE_ENGINE True if the application supports delegated APE engine.\r\n * @param SUPPORT_HTML_EXTENSIONS True if the application supports HTML extensions.\r\n * @param DISABLE_FLASH_EXTENSIONS True if the application disables FLASH extensions.\r\n *\r\n * @return A new \\c HostCapabilities object.\r\n */\r\nfunction HostCapabilities(\r\n    EXTENDED_PANEL_MENU,\r\n    EXTENDED_PANEL_ICONS,\r\n    DELEGATE_APE_ENGINE,\r\n    SUPPORT_HTML_EXTENSIONS,\r\n    DISABLE_FLASH_EXTENSIONS\r\n) {\r\n    this.EXTENDED_PANEL_MENU = EXTENDED_PANEL_MENU;\r\n    this.EXTENDED_PANEL_ICONS = EXTENDED_PANEL_ICONS;\r\n    this.DELEGATE_APE_ENGINE = DELEGATE_APE_ENGINE;\r\n    this.SUPPORT_HTML_EXTENSIONS = SUPPORT_HTML_EXTENSIONS;\r\n    this.DISABLE_FLASH_EXTENSIONS = DISABLE_FLASH_EXTENSIONS; // Since 5.0.0\r\n}\r\n\r\n/**\r\n * @class ApiVersion\r\n * Stores current api version.\r\n *\r\n * Since 4.2.0\r\n *\r\n * @param major  The major version\r\n * @param minor  The minor version.\r\n * @param micro  The micro version.\r\n *\r\n * @return ApiVersion object.\r\n */\r\nfunction ApiVersion(major, minor, micro) {\r\n    this.major = major;\r\n    this.minor = minor;\r\n    this.micro = micro;\r\n}\r\n\r\n/**\r\n * @class MenuItemStatus\r\n * Stores flyout menu item status\r\n *\r\n * Since 5.2.0\r\n *\r\n * @param menuItemLabel  The menu item label.\r\n * @param enabled        True if user wants to enable the menu item.\r\n * @param checked        True if user wants to check the menu item.\r\n *\r\n * @return MenuItemStatus object.\r\n */\r\nfunction MenuItemStatus(menuItemLabel, enabled, checked) {\r\n    this.menuItemLabel = menuItemLabel;\r\n    this.enabled = enabled;\r\n    this.checked = checked;\r\n}\r\n\r\n/**\r\n * @class ContextMenuItemStatus\r\n * Stores the status of the context menu item.\r\n *\r\n * Since 5.2.0\r\n *\r\n * @param menuItemID     The menu item id.\r\n * @param enabled        True if user wants to enable the menu item.\r\n * @param checked        True if user wants to check the menu item.\r\n *\r\n * @return MenuItemStatus object.\r\n */\r\nfunction ContextMenuItemStatus(menuItemID, enabled, checked) {\r\n    this.menuItemID = menuItemID;\r\n    this.enabled = enabled;\r\n    this.checked = checked;\r\n}\r\n//------------------------------ CSInterface ----------------------------------\r\n\r\n/**\r\n * @class CSInterface\r\n * This is the entry point to the CEP extensibility infrastructure.\r\n * Instantiate this object and use it to:\r\n * <ul>\r\n * <li>Access information about the host application in which an extension is running</li>\r\n * <li>Launch an extension</li>\r\n * <li>Register interest in event notifications, and dispatch events</li>\r\n * </ul>\r\n *\r\n * @return A new \\c CSInterface object\r\n */\r\nfunction CSInterface() { }\r\n\r\n/**\r\n * User can add this event listener to handle native application theme color changes.\r\n * Callback function gives extensions ability to fine-tune their theme color after the\r\n * global theme color has been changed.\r\n * The callback function should be like below:\r\n *\r\n * @example\r\n * // event is a CSEvent object, but user can ignore it.\r\n * function OnAppThemeColorChanged(event)\r\n * {\r\n *    // Should get a latest HostEnvironment object from application.\r\n *    var skinInfo = JSON.parse(window.__adobe_cep__.getHostEnvironment()).appSkinInfo;\r\n *    // Gets the style information such as color info from the skinInfo,\r\n *    // and redraw all UI controls of your extension according to the style info.\r\n * }\r\n */\r\nCSInterface.THEME_COLOR_CHANGED_EVENT =\r\n    \"com.adobe.csxs.events.ThemeColorChanged\";\r\n\r\n/** The host environment data object. */\r\nCSInterface.prototype.hostEnvironment = window.__adobe_cep__\r\n    ? JSON.parse(window.__adobe_cep__.getHostEnvironment())\r\n    : null;\r\n\r\n/** Retrieves information about the host environment in which the\r\n *  extension is currently running.\r\n *\r\n *   @return A \\c #HostEnvironment object.\r\n */\r\nCSInterface.prototype.getHostEnvironment = function () {\r\n    this.hostEnvironment = JSON.parse(window.__adobe_cep__.getHostEnvironment());\r\n    return this.hostEnvironment;\r\n};\r\n\r\n/** Loads binary file created which is located at url asynchronously\r\n *\r\n *@param urlName url at which binary file is located. Local files should start with 'file://'\r\n *@param callback Optional. A callback function that returns after binary is loaded\r\n *@example\r\n * To create JS binary use command ./cep_compiler test.js test.bin\r\n * To load JS binary asyncronously\r\n *   var CSLib = new CSInterface();\r\n *   CSLib.loadBinAsync(url, function () { });\r\n */\r\nCSInterface.prototype.loadBinAsync = function (urlName, callback) {\r\n    try {\r\n        var xhr = new XMLHttpRequest();\r\n        xhr.responseType = \"arraybuffer\"; // make response as ArrayBuffer\r\n        xhr.open(\"GET\", urlName, true);\r\n        xhr.onerror = function () {\r\n            console.log(\"Unable to load snapshot from given URL\");\r\n            return false;\r\n        };\r\n        xhr.send();\r\n        xhr.onload = () => {\r\n            window.__adobe_cep__.loadSnapshot(xhr.response);\r\n            if (typeof callback === \"function\") {\r\n                callback();\r\n            } else if (typeof callback !== \"undefined\") {\r\n                console.log(\"Provided callback is not a function\");\r\n            }\r\n        };\r\n    } catch (err) {\r\n        console.log(err);\r\n        return false;\r\n    }\r\n\r\n    return true;\r\n};\r\n\r\n/** Loads binary file created synchronously\r\n *\r\n *@param pathName the local path at which binary file is located\r\n *@example\r\n * To create JS binary use command ./cep_compiler test.js test.bin\r\n * To load JS binary syncronously\r\n *   var CSLib = new CSInterface();\r\n *   CSLib.loadBinSync(path);\r\n */\r\nCSInterface.prototype.loadBinSync = function (pathName) {\r\n    try {\r\n        var OSVersion = this.getOSInformation();\r\n        if (pathName.startsWith(\"file://\")) {\r\n            if (OSVersion.indexOf(\"Windows\") >= 0) {\r\n                pathName = pathName.replace(\"file:///\", \"\");\r\n            } else if (OSVersion.indexOf(\"Mac\") >= 0) {\r\n                pathName = pathName.replace(\"file://\", \"\");\r\n            }\r\n            window.__adobe_cep__.loadSnapshot(pathName);\r\n            return true;\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return false;\r\n    }\r\n    //control should not come here\r\n    return false;\r\n};\r\n\r\n/** Closes this extension. */\r\nCSInterface.prototype.closeExtension = function () {\r\n    window.__adobe_cep__.closeExtension();\r\n};\r\n\r\n/**\r\n * Retrieves a path for which a constant is defined in the system.\r\n *\r\n * @param pathType The path-type constant defined in \\c #SystemPath ,\r\n *\r\n * @return The platform-specific system path string.\r\n */\r\nCSInterface.prototype.getSystemPath = function (pathType) {\r\n    var path = decodeURI(window.__adobe_cep__.getSystemPath(pathType));\r\n    var OSVersion = this.getOSInformation();\r\n    if (OSVersion.indexOf(\"Windows\") >= 0) {\r\n        path = path.replace(\"file:///\", \"\");\r\n    } else if (OSVersion.indexOf(\"Mac\") >= 0) {\r\n        path = path.replace(\"file://\", \"\");\r\n    }\r\n    return path;\r\n};\r\n\r\n/**\r\n * Evaluates a JavaScript script, which can use the JavaScript DOM\r\n * of the host application.\r\n *\r\n * @param script    The JavaScript script.\r\n * @param callback  Optional. A callback function that receives the result of execution.\r\n *          If execution fails, the callback function receives the error message \\c EvalScript_ErrMessage.\r\n */\r\nCSInterface.prototype.evalScript = function (script, callback) {\r\n    if (callback === null || callback === undefined) {\r\n        callback = function (result) { };\r\n    }\r\n    window.__adobe_cep__.evalScript(script, callback);\r\n};\r\n\r\n/**\r\n * Retrieves the unique identifier of the application.\r\n * in which the extension is currently running.\r\n *\r\n * @return The unique ID string.\r\n */\r\nCSInterface.prototype.getApplicationID = function () {\r\n    var appId = this.hostEnvironment.appId;\r\n    return appId;\r\n};\r\n\r\n/**\r\n * Retrieves host capability information for the application\r\n * in which the extension is currently running.\r\n *\r\n * @return A \\c #HostCapabilities object.\r\n */\r\nCSInterface.prototype.getHostCapabilities = function () {\r\n    var hostCapabilities = JSON.parse(window.__adobe_cep__.getHostCapabilities());\r\n    return hostCapabilities;\r\n};\r\n\r\n/**\r\n * Triggers a CEP event programmatically. Yoy can use it to dispatch\r\n * an event of a predefined type, or of a type you have defined.\r\n *\r\n * @param event A \\c CSEvent object.\r\n */\r\nCSInterface.prototype.dispatchEvent = function (event) {\r\n    if (typeof event.data == \"object\") {\r\n        event.data = JSON.stringify(event.data);\r\n    }\r\n\r\n    window.__adobe_cep__.dispatchEvent(event);\r\n};\r\n\r\n/**\r\n * Registers an interest in a CEP event of a particular type, and\r\n * assigns an event handler.\r\n * The event infrastructure notifies your extension when events of this type occur,\r\n * passing the event object to the registered handler function.\r\n *\r\n * @param type     The name of the event type of interest.\r\n * @param listener The JavaScript handler function or method.\r\n * @param obj      Optional, the object containing the handler method, if any.\r\n *         Default is null.\r\n */\r\nCSInterface.prototype.addEventListener = function (type, listener, obj) {\r\n    window.__adobe_cep__.addEventListener(type, listener, obj);\r\n};\r\n\r\n/**\r\n * Removes a registered event listener.\r\n *\r\n * @param type      The name of the event type of interest.\r\n * @param listener  The JavaScript handler function or method that was registered.\r\n * @param obj       Optional, the object containing the handler method, if any.\r\n *          Default is null.\r\n */\r\nCSInterface.prototype.removeEventListener = function (type, listener, obj) {\r\n    window.__adobe_cep__.removeEventListener(type, listener, obj);\r\n};\r\n\r\n/**\r\n * Loads and launches another extension, or activates the extension if it is already loaded.\r\n *\r\n * @param extensionId       The extension's unique identifier.\r\n * @param startupParams     Not currently used, pass \"\".\r\n *\r\n * @example\r\n * To launch the extension \"help\" with ID \"HLP\" from this extension, call:\r\n * <code>requestOpenExtension(\"HLP\", \"\"); </code>\r\n *\r\n */\r\nCSInterface.prototype.requestOpenExtension = function (extensionId, params) {\r\n    window.__adobe_cep__.requestOpenExtension(extensionId, params);\r\n};\r\n\r\n/**\r\n * Retrieves the list of extensions currently loaded in the current host application.\r\n * The extension list is initialized once, and remains the same during the lifetime\r\n * of the CEP session.\r\n *\r\n * @param extensionIds  Optional, an array of unique identifiers for extensions of interest.\r\n *          If omitted, retrieves data for all extensions.\r\n *\r\n * @return Zero or more \\c #Extension objects.\r\n */\r\nCSInterface.prototype.getExtensions = function (extensionIds) {\r\n    var extensionIdsStr = JSON.stringify(extensionIds);\r\n    var extensionsStr = window.__adobe_cep__.getExtensions(extensionIdsStr);\r\n\r\n    var extensions = JSON.parse(extensionsStr);\r\n    return extensions;\r\n};\r\n\r\n/**\r\n * Retrieves network-related preferences.\r\n *\r\n * @return A JavaScript object containing network preferences.\r\n */\r\nCSInterface.prototype.getNetworkPreferences = function () {\r\n    var result = window.__adobe_cep__.getNetworkPreferences();\r\n    var networkPre = JSON.parse(result);\r\n\r\n    return networkPre;\r\n};\r\n\r\n/**\r\n * Initializes the resource bundle for this extension with property values\r\n * for the current application and locale.\r\n * To support multiple locales, you must define a property file for each locale,\r\n * containing keyed display-string values for that locale.\r\n * See localization documentation for Extension Builder and related products.\r\n *\r\n * Keys can be in the\r\n * form <code>key.value=\"localized string\"</code>, for use in HTML text elements.\r\n * For example, in this input element, the localized \\c key.value string is displayed\r\n * instead of the empty \\c value string:\r\n *\r\n * <code><input type=\"submit\" value=\"\" data-locale=\"key\"/></code>\r\n *\r\n * @return An object containing the resource bundle information.\r\n */\r\nCSInterface.prototype.initResourceBundle = function () {\r\n    var resourceBundle = JSON.parse(window.__adobe_cep__.initResourceBundle());\r\n    var resElms = document.querySelectorAll(\"[data-locale]\");\r\n    for (var n = 0; n < resElms.length; n++) {\r\n        var resEl = resElms[n];\r\n        // Get the resource key from the element.\r\n        var resKey = resEl.getAttribute(\"data-locale\");\r\n        if (resKey) {\r\n            // Get all the resources that start with the key.\r\n            for (var key in resourceBundle) {\r\n                if (key.indexOf(resKey) === 0) {\r\n                    var resValue = resourceBundle[key];\r\n                    if (key.length == resKey.length) {\r\n                        resEl.innerHTML = resValue;\r\n                    } else if (\".\" == key.charAt(resKey.length)) {\r\n                        var attrKey = key.substring(resKey.length + 1);\r\n                        resEl[attrKey] = resValue;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return resourceBundle;\r\n};\r\n\r\n/**\r\n * Writes installation information to a file.\r\n *\r\n * @return The file path.\r\n */\r\nCSInterface.prototype.dumpInstallationInfo = function () {\r\n    return window.__adobe_cep__.dumpInstallationInfo();\r\n};\r\n\r\n/**\r\n * Retrieves version information for the current Operating System,\r\n * See http://www.useragentstring.com/pages/Chrome/ for Chrome \\c navigator.userAgent values.\r\n *\r\n * @return A string containing the OS version, or \"unknown Operation System\".\r\n * If user customizes the User Agent by setting CEF command parameter \"--user-agent\", only\r\n * \"Mac OS X\" or \"Windows\" will be returned.\r\n */\r\nCSInterface.prototype.getOSInformation = function () {\r\n    var userAgent = navigator.userAgent;\r\n\r\n    if (navigator.platform == \"Win32\" || navigator.platform == \"Windows\") {\r\n        var winVersion = \"Windows\";\r\n        var winBit = \"\";\r\n        if (userAgent.indexOf(\"Windows\") > -1) {\r\n            if (userAgent.indexOf(\"Windows NT 5.0\") > -1) {\r\n                winVersion = \"Windows 2000\";\r\n            } else if (userAgent.indexOf(\"Windows NT 5.1\") > -1) {\r\n                winVersion = \"Windows XP\";\r\n            } else if (userAgent.indexOf(\"Windows NT 5.2\") > -1) {\r\n                winVersion = \"Windows Server 2003\";\r\n            } else if (userAgent.indexOf(\"Windows NT 6.0\") > -1) {\r\n                winVersion = \"Windows Vista\";\r\n            } else if (userAgent.indexOf(\"Windows NT 6.1\") > -1) {\r\n                winVersion = \"Windows 7\";\r\n            } else if (userAgent.indexOf(\"Windows NT 6.2\") > -1) {\r\n                winVersion = \"Windows 8\";\r\n            } else if (userAgent.indexOf(\"Windows NT 6.3\") > -1) {\r\n                winVersion = \"Windows 8.1\";\r\n            } else if (userAgent.indexOf(\"Windows NT 10\") > -1) {\r\n                winVersion = \"Windows 10\";\r\n            }\r\n\r\n            if (userAgent.indexOf(\"WOW64\") > -1 || userAgent.indexOf(\"Win64\") > -1) {\r\n                winBit = \" 64-bit\";\r\n            } else {\r\n                winBit = \" 32-bit\";\r\n            }\r\n        }\r\n\r\n        return winVersion + winBit;\r\n    } else if (\r\n        navigator.platform == \"MacIntel\" ||\r\n        navigator.platform == \"Macintosh\"\r\n    ) {\r\n        var result = \"Mac OS X\";\r\n\r\n        if (userAgent.indexOf(\"Mac OS X\") > -1) {\r\n            result = userAgent.substring(\r\n                userAgent.indexOf(\"Mac OS X\"),\r\n                userAgent.indexOf(\")\")\r\n            );\r\n            result = result.replace(/_/g, \".\");\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    return \"Unknown Operation System\";\r\n};\r\n\r\n/**\r\n * Opens a page in the default system browser.\r\n *\r\n * Since 4.2.0\r\n *\r\n * @param url  The URL of the page/file to open, or the email address.\r\n * Must use HTTP/HTTPS/file/mailto protocol. For example:\r\n *   \"http://www.adobe.com\"\r\n *   \"https://github.com\"\r\n *   \"file:///C:/log.txt\"\r\n *   \"mailto:test@adobe.com\"\r\n *\r\n * @return One of these error codes:\\n\r\n *      <ul>\\n\r\n *          <li>NO_ERROR - 0</li>\\n\r\n *          <li>ERR_UNKNOWN - 1</li>\\n\r\n *          <li>ERR_INVALID_PARAMS - 2</li>\\n\r\n *          <li>ERR_INVALID_URL - 201</li>\\n\r\n *      </ul>\\n\r\n */\r\nCSInterface.prototype.openURLInDefaultBrowser = function (url) {\r\n    return cep.util.openURLInDefaultBrowser(url);\r\n};\r\n\r\n/**\r\n * Retrieves extension ID.\r\n *\r\n * Since 4.2.0\r\n *\r\n * @return extension ID.\r\n */\r\nCSInterface.prototype.getExtensionID = function () {\r\n    return window.__adobe_cep__.getExtensionId();\r\n};\r\n\r\n/**\r\n * Retrieves the scale factor of screen.\r\n * On Windows platform, the value of scale factor might be different from operating system's scale factor,\r\n * since host application may use its self-defined scale factor.\r\n *\r\n * Since 4.2.0\r\n *\r\n * @return One of the following float number.\r\n *      <ul>\\n\r\n *          <li> -1.0 when error occurs </li>\\n\r\n *          <li> 1.0 means normal screen </li>\\n\r\n *          <li> >1.0 means HiDPI screen </li>\\n\r\n *      </ul>\\n\r\n */\r\nCSInterface.prototype.getScaleFactor = function () {\r\n    return window.__adobe_cep__.getScaleFactor();\r\n};\r\n\r\n/**\r\n * Retrieves the scale factor of Monitor.\r\n *\r\n * Since 8.5.0\r\n *\r\n * @return value >= 1.0f\r\n * only available for windows machine\r\n */\r\nif (navigator.appVersion.toLowerCase().indexOf(\"windows\") >= 0) {\r\n    CSInterface.prototype.getMonitorScaleFactor = function () {\r\n        return window.__adobe_cep__.getMonitorScaleFactor();\r\n    };\r\n}\r\n\r\n/**\r\n * Set a handler to detect any changes of scale factor. This only works on Mac.\r\n *\r\n * Since 4.2.0\r\n *\r\n * @param handler   The function to be called when scale factor is changed.\r\n *\r\n */\r\nCSInterface.prototype.setScaleFactorChangedHandler = function (handler) {\r\n    window.__adobe_cep__.setScaleFactorChangedHandler(handler);\r\n};\r\n\r\n/**\r\n * Retrieves current API version.\r\n *\r\n * Since 4.2.0\r\n *\r\n * @return ApiVersion object.\r\n *\r\n */\r\nCSInterface.prototype.getCurrentApiVersion = function () {\r\n    var apiVersion = JSON.parse(window.__adobe_cep__.getCurrentApiVersion());\r\n    return apiVersion;\r\n};\r\n\r\n/**\r\n * Set panel flyout menu by an XML.\r\n *\r\n * Since 5.2.0\r\n *\r\n * Register a callback function for \"com.adobe.csxs.events.flyoutMenuClicked\" to get notified when a\r\n * menu item is clicked.\r\n * The \"data\" attribute of event is an object which contains \"menuId\" and \"menuName\" attributes.\r\n *\r\n * Register callback functions for \"com.adobe.csxs.events.flyoutMenuOpened\" and \"com.adobe.csxs.events.flyoutMenuClosed\"\r\n * respectively to get notified when flyout menu is opened or closed.\r\n *\r\n * @param menu     A XML string which describes menu structure.\r\n * An example menu XML:\r\n * <Menu>\r\n *   <MenuItem Id=\"menuItemId1\" Label=\"TestExample1\" Enabled=\"true\" Checked=\"false\"/>\r\n *   <MenuItem Label=\"TestExample2\">\r\n *     <MenuItem Label=\"TestExample2-1\" >\r\n *       <MenuItem Label=\"TestExample2-1-1\" Enabled=\"false\" Checked=\"true\"/>\r\n *     </MenuItem>\r\n *     <MenuItem Label=\"TestExample2-2\" Enabled=\"true\" Checked=\"true\"/>\r\n *   </MenuItem>\r\n *   <MenuItem Label=\"---\" />\r\n *   <MenuItem Label=\"TestExample3\" Enabled=\"false\" Checked=\"false\"/>\r\n * </Menu>\r\n *\r\n */\r\nCSInterface.prototype.setPanelFlyoutMenu = function (menu) {\r\n    if (\"string\" != typeof menu) {\r\n        return;\r\n    }\r\n\r\n    window.__adobe_cep__.invokeSync(\"setPanelFlyoutMenu\", menu);\r\n};\r\n\r\n/**\r\n * Updates a menu item in the extension window's flyout menu, by setting the enabled\r\n * and selection status.\r\n *\r\n * Since 5.2.0\r\n *\r\n * @param menuItemLabel The menu item label.\r\n * @param enabled       True to enable the item, false to disable it (gray it out).\r\n * @param checked       True to select the item, false to deselect it.\r\n *\r\n * @return false when the host application does not support this functionality (HostCapabilities.EXTENDED_PANEL_MENU is false).\r\n *         Fails silently if menu label is invalid.\r\n *\r\n * @see HostCapabilities.EXTENDED_PANEL_MENU\r\n */\r\nCSInterface.prototype.updatePanelMenuItem = function (\r\n    menuItemLabel,\r\n    enabled,\r\n    checked\r\n) {\r\n    var ret = false;\r\n    if (this.getHostCapabilities().EXTENDED_PANEL_MENU) {\r\n        var itemStatus = new MenuItemStatus(menuItemLabel, enabled, checked);\r\n        ret = window.__adobe_cep__.invokeSync(\r\n            \"updatePanelMenuItem\",\r\n            JSON.stringify(itemStatus)\r\n        );\r\n    }\r\n    return ret;\r\n};\r\n\r\n/**\r\n  * Set context menu by XML string.\r\n  *\r\n  * Since 5.2.0\r\n  *\r\n  * There are a number of conventions used to communicate what type of menu item to create and how it should be handled.\r\n  * - an item without menu ID or menu name is disabled and is not shown.\r\n  * - if the item name is \"---\" (three hyphens) then it is treated as a separator. The menu ID in this case will always be NULL.\r\n  * - Checkable attribute takes precedence over Checked attribute.\r\n  * - a PNG icon. For optimal display results please supply a 16 x 16px icon as larger dimensions will increase the size of the menu item.\r\n      The Chrome extension contextMenus API was taken as a reference.\r\n      https://developer.chrome.com/extensions/contextMenus\r\n  * - the items with icons and checkable items cannot coexist on the same menu level. The former take precedences over the latter.\r\n  *\r\n  * @param menu      A XML string which describes menu structure.\r\n  * @param callback  The callback function which is called when a menu item is clicked. The only parameter is the returned ID of clicked menu item.\r\n  *\r\n  * @description An example menu XML:\r\n  * <Menu>\r\n  *   <MenuItem Id=\"menuItemId1\" Label=\"TestExample1\" Enabled=\"true\" Checkable=\"true\" Checked=\"false\" Icon=\"./image/small_16X16.png\"/>\r\n  *   <MenuItem Id=\"menuItemId2\" Label=\"TestExample2\">\r\n  *     <MenuItem Id=\"menuItemId2-1\" Label=\"TestExample2-1\" >\r\n  *       <MenuItem Id=\"menuItemId2-1-1\" Label=\"TestExample2-1-1\" Enabled=\"false\" Checkable=\"true\" Checked=\"true\"/>\r\n  *     </MenuItem>\r\n  *     <MenuItem Id=\"menuItemId2-2\" Label=\"TestExample2-2\" Enabled=\"true\" Checkable=\"true\" Checked=\"true\"/>\r\n  *   </MenuItem>\r\n  *   <MenuItem Label=\"---\" />\r\n  *   <MenuItem Id=\"menuItemId3\" Label=\"TestExample3\" Enabled=\"false\" Checkable=\"true\" Checked=\"false\"/>\r\n  * </Menu>\r\n  */\r\nCSInterface.prototype.setContextMenu = function (menu, callback) {\r\n    if (\"string\" != typeof menu) {\r\n        return;\r\n    }\r\n\r\n    window.__adobe_cep__.invokeAsync(\"setContextMenu\", menu, callback);\r\n};\r\n\r\n/**\r\n  * Set context menu by JSON string.\r\n  *\r\n  * Since 6.0.0\r\n  *\r\n  * There are a number of conventions used to communicate what type of menu item to create and how it should be handled.\r\n  * - an item without menu ID or menu name is disabled and is not shown.\r\n  * - if the item label is \"---\" (three hyphens) then it is treated as a separator. The menu ID in this case will always be NULL.\r\n  * - Checkable attribute takes precedence over Checked attribute.\r\n  * - a PNG icon. For optimal display results please supply a 16 x 16px icon as larger dimensions will increase the size of the menu item.\r\n      The Chrome extension contextMenus API was taken as a reference.\r\n  * - the items with icons and checkable items cannot coexist on the same menu level. The former take precedences over the latter.\r\n      https://developer.chrome.com/extensions/contextMenus\r\n  *\r\n  * @param menu      A JSON string which describes menu structure.\r\n  * @param callback  The callback function which is called when a menu item is clicked. The only parameter is the returned ID of clicked menu item.\r\n  *\r\n  * @description An example menu JSON:\r\n  *\r\n  * {\r\n  *      \"menu\": [\r\n  *          {\r\n  *              \"id\": \"menuItemId1\",\r\n  *              \"label\": \"testExample1\",\r\n  *              \"enabled\": true,\r\n  *              \"checkable\": true,\r\n  *              \"checked\": false,\r\n  *              \"icon\": \"./image/small_16X16.png\"\r\n  *          },\r\n  *          {\r\n  *              \"id\": \"menuItemId2\",\r\n  *              \"label\": \"testExample2\",\r\n  *              \"menu\": [\r\n  *                  {\r\n  *                      \"id\": \"menuItemId2-1\",\r\n  *                      \"label\": \"testExample2-1\",\r\n  *                      \"menu\": [\r\n  *                          {\r\n  *                              \"id\": \"menuItemId2-1-1\",\r\n  *                              \"label\": \"testExample2-1-1\",\r\n  *                              \"enabled\": false,\r\n  *                              \"checkable\": true,\r\n  *                              \"checked\": true\r\n  *                          }\r\n  *                      ]\r\n  *                  },\r\n  *                  {\r\n  *                      \"id\": \"menuItemId2-2\",\r\n  *                      \"label\": \"testExample2-2\",\r\n  *                      \"enabled\": true,\r\n  *                      \"checkable\": true,\r\n  *                      \"checked\": true\r\n  *                  }\r\n  *              ]\r\n  *          },\r\n  *          {\r\n  *              \"label\": \"---\"\r\n  *          },\r\n  *          {\r\n  *              \"id\": \"menuItemId3\",\r\n  *              \"label\": \"testExample3\",\r\n  *              \"enabled\": false,\r\n  *              \"checkable\": true,\r\n  *              \"checked\": false\r\n  *          }\r\n  *      ]\r\n  *  }\r\n  *\r\n  */\r\nCSInterface.prototype.setContextMenuByJSON = function (menu, callback) {\r\n    if (\"string\" != typeof menu) {\r\n        return;\r\n    }\r\n\r\n    window.__adobe_cep__.invokeAsync(\"setContextMenuByJSON\", menu, callback);\r\n};\r\n\r\n/**\r\n * Updates a context menu item by setting the enabled and selection status.\r\n *\r\n * Since 5.2.0\r\n *\r\n * @param menuItemID    The menu item ID.\r\n * @param enabled       True to enable the item, false to disable it (gray it out).\r\n * @param checked       True to select the item, false to deselect it.\r\n */\r\nCSInterface.prototype.updateContextMenuItem = function (\r\n    menuItemID,\r\n    enabled,\r\n    checked\r\n) {\r\n    var itemStatus = new ContextMenuItemStatus(menuItemID, enabled, checked);\r\n    ret = window.__adobe_cep__.invokeSync(\r\n        \"updateContextMenuItem\",\r\n        JSON.stringify(itemStatus)\r\n    );\r\n};\r\n\r\n/**\r\n * Get the visibility status of an extension window.\r\n *\r\n * Since 6.0.0\r\n *\r\n * @return true if the extension window is visible; false if the extension window is hidden.\r\n */\r\nCSInterface.prototype.isWindowVisible = function () {\r\n    return window.__adobe_cep__.invokeSync(\"isWindowVisible\", \"\");\r\n};\r\n\r\n/**\r\n * Resize extension's content to the specified dimensions.\r\n * 1. Works with modal and modeless extensions in all Adobe products.\r\n * 2. Extension's manifest min/max size constraints apply and take precedence.\r\n * 3. For panel extensions\r\n *    3.1 This works in all Adobe products except:\r\n *        * Premiere Pro\r\n *        * Prelude\r\n *        * After Effects\r\n *    3.2 When the panel is in certain states (especially when being docked),\r\n *        it will not change to the desired dimensions even when the\r\n *        specified size satisfies min/max constraints.\r\n *\r\n * Since 6.0.0\r\n *\r\n * @param width  The new width\r\n * @param height The new height\r\n */\r\nCSInterface.prototype.resizeContent = function (width, height) {\r\n    window.__adobe_cep__.resizeContent(width, height);\r\n};\r\n\r\n/**\r\n * Register the invalid certificate callback for an extension.\r\n * This callback will be triggered when the extension tries to access the web site that contains the invalid certificate on the main frame.\r\n * But if the extension does not call this function and tries to access the web site containing the invalid certificate, a default error page will be shown.\r\n *\r\n * Since 6.1.0\r\n *\r\n * @param callback the callback function\r\n */\r\nCSInterface.prototype.registerInvalidCertificateCallback = function (callback) {\r\n    return window.__adobe_cep__.registerInvalidCertificateCallback(callback);\r\n};\r\n\r\n/**\r\n  * Register an interest in some key events to prevent them from being sent to the host application.\r\n  *\r\n  * This function works with modeless extensions and panel extensions.\r\n  * Generally all the key events will be sent to the host application for these two extensions if the current focused element\r\n  * is not text input or dropdown,\r\n  * If you want to intercept some key events and want them to be handled in the extension, please call this function\r\n  * in advance to prevent them being sent to the host application.\r\n  *\r\n  * Since 6.1.0\r\n  *\r\n  * @param keyEventsInterest      A JSON string describing those key events you are interested in. A null object or\r\n                                  an empty string will lead to removing the interest\r\n  *\r\n  * This JSON string should be an array, each object has following keys:\r\n  *\r\n  * keyCode:  [Required] represents an OS system dependent virtual key code identifying\r\n  *           the unmodified value of the pressed key.\r\n  * ctrlKey:  [optional] a Boolean that indicates if the control key was pressed (true) or not (false) when the event occurred.\r\n  * altKey:   [optional] a Boolean that indicates if the alt key was pressed (true) or not (false) when the event occurred.\r\n  * shiftKey: [optional] a Boolean that indicates if the shift key was pressed (true) or not (false) when the event occurred.\r\n  * metaKey:  [optional] (Mac Only) a Boolean that indicates if the Meta key was pressed (true) or not (false) when the event occurred.\r\n  *                      On Macintosh keyboards, this is the command key. To detect Windows key on Windows, please use keyCode instead.\r\n  * An example JSON string:\r\n  *\r\n  * [\r\n  *     {\r\n  *         \"keyCode\": 48\r\n  *     },\r\n  *     {\r\n  *         \"keyCode\": 123,\r\n  *         \"ctrlKey\": true\r\n  *     },\r\n  *     {\r\n  *         \"keyCode\": 123,\r\n  *         \"ctrlKey\": true,\r\n  *         \"metaKey\": true\r\n  *     }\r\n  * ]\r\n  *\r\n  */\r\nCSInterface.prototype.registerKeyEventsInterest = function (keyEventsInterest) {\r\n    return window.__adobe_cep__.registerKeyEventsInterest(keyEventsInterest);\r\n};\r\n\r\n/**\r\n * Set the title of the extension window.\r\n * This function works with modal and modeless extensions in all Adobe products, and panel extensions in Photoshop, InDesign, InCopy, Illustrator, Flash Pro and Dreamweaver.\r\n *\r\n * Since 6.1.0\r\n *\r\n * @param title The window title.\r\n */\r\nCSInterface.prototype.setWindowTitle = function (title) {\r\n    window.__adobe_cep__.invokeSync(\"setWindowTitle\", title);\r\n};\r\n\r\n/**\r\n * Get the title of the extension window.\r\n * This function works with modal and modeless extensions in all Adobe products, and panel extensions in Photoshop, InDesign, InCopy, Illustrator, Flash Pro and Dreamweaver.\r\n *\r\n * Since 6.1.0\r\n *\r\n * @return The window title.\r\n */\r\nCSInterface.prototype.getWindowTitle = function () {\r\n    return window.__adobe_cep__.invokeSync(\"getWindowTitle\", \"\");\r\n};\r\n\r\n// Boilerplate Added Export\r\nexport default CSInterface;\r\nexport {\r\n    CSXSWindowType,\r\n    Version,\r\n    VersionBound,\r\n    VersionRange,\r\n    Runtime,\r\n    Extension,\r\n    CSEvent,\r\n    SystemPath,\r\n    ColorType,\r\n    RGBColor,\r\n    Direction,\r\n    GradientStop,\r\n    GradientColor,\r\n    UIColor,\r\n    AppSkinInfo,\r\n    HostEnvironment,\r\n    HostCapabilities,\r\n    ApiVersion,\r\n    MenuItemStatus,\r\n    ContextMenuItemStatus,\r\n    CSInterface,\r\n};\r\n","// Abstracted built-in Node.js Modules\r\n\r\n//@ts-ignore\r\nexport const crypto = (\r\n    typeof window.cep !== \"undefined\" ? require(\"crypto\") : {}\r\n) as typeof import(\"crypto\");\r\nexport const assert = (\r\n    typeof window.cep !== \"undefined\" ? require(\"assert\") : {}\r\n) as typeof import(\"assert\");\r\nexport const buffer = (\r\n    typeof window.cep !== \"undefined\" ? require(\"buffer\") : {}\r\n) as typeof import(\"buffer\");\r\nexport const child_process = (\r\n    typeof window.cep !== \"undefined\" ? require(\"child_process\") : {}\r\n) as typeof import(\"child_process\");\r\nexport const cluster = (\r\n    typeof window.cep !== \"undefined\" ? require(\"cluster\") : {}\r\n) as typeof import(\"cluster\");\r\nexport const dgram = (\r\n    typeof window.cep !== \"undefined\" ? require(\"dgram\") : {}\r\n) as typeof import(\"dgram\");\r\nexport const dns = (\r\n    typeof window.cep !== \"undefined\" ? require(\"dns\") : {}\r\n) as typeof import(\"dns\");\r\nexport const domain = (\r\n    typeof window.cep !== \"undefined\" ? require(\"domain\") : {}\r\n) as typeof import(\"domain\");\r\nexport const events = (\r\n    typeof window.cep !== \"undefined\" ? require(\"events\") : {}\r\n) as typeof import(\"events\");\r\nexport const fs = (\r\n    typeof window.cep !== \"undefined\" ? require(\"fs\") : {}\r\n) as typeof import(\"fs\");\r\nexport const http = (\r\n    typeof window.cep !== \"undefined\" ? require(\"http\") : {}\r\n) as typeof import(\"http\");\r\nexport const https = (\r\n    typeof window.cep !== \"undefined\" ? require(\"https\") : {}\r\n) as typeof import(\"https\");\r\nexport const net = (\r\n    typeof window.cep !== \"undefined\" ? require(\"net\") : {}\r\n) as typeof import(\"net\");\r\nexport const os = (\r\n    typeof window.cep !== \"undefined\" ? require(\"os\") : {}\r\n) as typeof import(\"os\");\r\nexport const path = (\r\n    typeof window.cep !== \"undefined\" ? require(\"path\") : {}\r\n) as typeof import(\"path\");\r\nexport const punycode = (\r\n    typeof window.cep !== \"undefined\" ? require(\"punycode\") : {}\r\n) as typeof import(\"punycode\");\r\nexport const querystring = (\r\n    typeof window.cep !== \"undefined\" ? require(\"querystring\") : {}\r\n) as typeof import(\"querystring\");\r\nexport const readline = (\r\n    typeof window.cep !== \"undefined\" ? require(\"readline\") : {}\r\n) as typeof import(\"readline\");\r\nexport const stream = (\r\n    typeof window.cep !== \"undefined\" ? require(\"stream\") : {}\r\n) as typeof import(\"stream\");\r\nexport const string_decoder = (\r\n    typeof window.cep !== \"undefined\" ? require(\"string_decoder\") : {}\r\n) as typeof import(\"string_decoder\");\r\nexport const timers = (\r\n    typeof window.cep !== \"undefined\" ? require(\"timers\") : {}\r\n) as typeof import(\"timers\");\r\nexport const tls = (\r\n    typeof window.cep !== \"undefined\" ? require(\"tls\") : {}\r\n) as typeof import(\"tls\");\r\nexport const tty = (\r\n    typeof window.cep !== \"undefined\" ? require(\"tty\") : {}\r\n) as typeof import(\"tty\");\r\nexport const url = (\r\n    typeof window.cep !== \"undefined\" ? require(\"url\") : {}\r\n) as typeof import(\"url\");\r\nexport const util = (\r\n    typeof window.cep !== \"undefined\" ? require(\"util\") : {}\r\n) as typeof import(\"util\");\r\nexport const v8 = (\r\n    typeof window.cep !== \"undefined\" ? require(\"v8\") : {}\r\n) as typeof import(\"v8\");\r\nexport const vm = (\r\n    typeof window.cep !== \"undefined\" ? require(\"vm\") : {}\r\n) as typeof import(\"vm\");\r\nexport const zlib = (\r\n    typeof window.cep !== \"undefined\" ? require(\"zlib\") : {}\r\n) as typeof import(\"zlib\");\r\n","import CSInterface from \"../lib/csinterface\";\r\nimport { SystemPath } from \"../lib/csinterface\";\r\nimport { fs, path } from \"../lib/node\";\r\nexport const csi = new CSInterface();\r\nimport getMAC from \"../lib/vendor/getMac\"\r\n\r\n\r\ninterface User {\r\n    username: string;\r\n    password: string;\r\n}\r\nexport const createFolder = (folderName: string) => {\r\n    fs.mkdir(folderName, { recursive: true }, (err) => {\r\n        if (err) {\r\n            if (err.code === 'EEXIST') {\r\n                console.log(`Folder \"${folderName}\" already exists.`);\r\n            } else {\r\n                console.error(`Failed to create folder \"${folderName}\". Error:`, err);\r\n            }\r\n        } else {\r\n            console.log(`Folder \"${folderName}\" created successfully.`);\r\n        }\r\n    });\r\n}\r\n\r\n\r\nexport class Yl_Tools {\r\n    constructor() {\r\n\r\n    }\r\n    name = \"Yl_Pr_Tools\"\r\n    version = \"2.0.0\"\r\n    ext_path = csi.getSystemPath(SystemPath.EXTENSION)\r\n    data_path = path.join(this.ext_path, \"data\")\r\n    sub_path = path.join(this.ext_path, \"sub\")\r\n    pwd_path = path.join(this.data_path, \"data.json\");\r\n\r\n    open_sub_folder = () => {\r\n        const { exec } = require('child_process');\r\n        const path = require('path');\r\n        exec(`explorer.exe \"${path.resolve(this.sub_path)}\"`, (err: any) => {\r\n            if (err) {\r\n                console.error(`Failed to open folder \"${this.sub_path}\". Error:`, err);\r\n            } else {\r\n                console.log(`Folder \"${this.sub_path}\" opened successfully.`);\r\n            }\r\n        });\r\n    };\r\n}\r\nconst yl_tools = new Yl_Tools();\r\n\r\n\r\n\r\nconst writeJson2Data = (filePath: string, data: User) => {\r\n    fs.writeFile(filePath, JSON.stringify(data), (err) => {\r\n        if (err) {\r\n            console.error(`Failed to write file \"${filePath}\". Error:`, err);\r\n        } else {\r\n            console.log(`Data written to file \"${filePath}\" successfully.`);\r\n        }\r\n    });\r\n}\r\n\r\nexport const initLogin = () => {\r\n    return readJsonFromData(yl_tools.pwd_path);\r\n}\r\n\r\nconst readJsonFromData = async (filePath: string) => {\r\n    try {\r\n        const data: any = await fs.promises.readFile(filePath);\r\n        const jsonData = JSON.parse(data);\r\n        console.log(`Data from file \"${filePath}\":`, jsonData);\r\n        return jsonData;\r\n    } catch (err) {\r\n        console.error(`Failed to read file \"${filePath}\". Error:`, err);\r\n        return null;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport async function auth(username: any, password: any) {\r\n    const macAddress = getMAC()\r\n    let reqUrl2 = `https://api.yuelili.com/get_order_status?username=${username} &password=${password}&post_id=18367&mac=${macAddress}`;\r\n\r\n    const res = await fetch(reqUrl2);\r\n    if (res.ok) {\r\n        const json = await res.json();\r\n        console.log(json);\r\n        if (json.order_status === 1) {\r\n            writeJson2Data(yl_tools.pwd_path, { username: username, password: password })\r\n            return true;\r\n        }\r\n    }\r\n}\r\n","import { Yl_Tools } from \"../../js/lib/config\"\r\nimport { path } from \"../../js/lib/node\"\r\nconst yl_tools = new Yl_Tools();\r\n\r\ndeclare global {\r\n    interface Array<T> {\r\n        filter(callbackfn: (value: T, index: number, array: T[]) => unknown, thisArg?: any): T[]; indexOf(searchElement: T, fromIndex?: number): number;\r\n    }\r\n}\r\n\r\nif (!Array.prototype.filter) {\r\n    Array.prototype.filter = function <T>(callback: (value: T, index: number, array: T[]) => boolean, thisArg?: any): T[] {\r\n        const filteredArray: T[] = [];\r\n        for (let i = 0; i < this.length; i++) {\r\n            if (callback.call(thisArg, this[i], i, this)) {\r\n                filteredArray.push(this[i]);\r\n            }\r\n        }\r\n        return filteredArray;\r\n    };\r\n}\r\nif (!Array.prototype.indexOf) {\r\n    Array.prototype.indexOf = function <T>(searchElement: T, fromIndex?: number): number {\r\n        const startIndex = fromIndex || 0;\r\n        let currentIndex = startIndex < 0 ? this.length + startIndex : startIndex;\r\n\r\n        while (currentIndex < this.length) {\r\n            if (this[currentIndex] === searchElement) {\r\n                return currentIndex;\r\n            }\r\n            currentIndex++;\r\n        }\r\n\r\n        return -1;\r\n    };\r\n}\r\nexport const clipsRender = (p1: number, p2: number, p3: number, p4: string) => {\r\n    alert(p1.toString(), p2.toString())\r\n    let time_list: number[][], name_list: string[];\r\n\r\n    const sequence = app.project.activeSequence || false;\r\n    if (!sequence) {\r\n        alert(\"请激活一个序列\");\r\n        return;\r\n    }\r\n    if (p1 === 0) {\r\n        alert(\"输入要参考的轨道\");\r\n        return;\r\n    }\r\n\r\n    const folderObj: Folder = new Folder(\"\");\r\n    const trg_folder: Folder = (folderObj as any).saveDlg(\"请选择一个文件夹，点右下角保存\");\r\n\r\n    if (!trg_folder) {\r\n        alert(\"未成功选择文件夹，已停止\");\r\n        return;\r\n    }\r\n\r\n    app.encoder.launchEncoder();\r\n\r\n    [time_list, name_list] = get_time_list(p1, p2, p3);\r\n\r\n\r\n\r\n    if (time_list[0].length < 2) {\r\n        alert(\"请选择一个有剪辑的视频/音频轨道\");\r\n        return;\r\n    }\r\n    if (p4.length < 1) {\r\n        p4 = \"\";\r\n    }\r\n    add_to_ame(time_list, trg_folder, name_list, p4);\r\n    alert(`已成功添加${time_list[0].length}`);\r\n};\r\n\r\n\r\n\r\nfunction get_time_list(p1: number, is_sel: number, is_connect: number): [number[][], string[]] {\r\n\r\n\r\n    let time_list: [number[], number[]] = [[], []];\r\n    let name_list: string[] = [];\r\n    const sequence = app.project.activeSequence;\r\n    const clips = p1 < 0 ? sequence.audioTracks[Math.abs(p1) - 1].clips : sequence.videoTracks[p1 - 1].clips;\r\n    if (!clips) {\r\n        return [[[0], [1]], [\"\"]];\r\n    }\r\n    let stop = true;\r\n    if (is_connect && !is_sel) {\r\n        for (let i = 0; i < clips.numItems; i++) {\r\n            const clip: any = clips[i];\r\n            if (stop) {\r\n                time_list[0].push((clip as any).start.seconds);\r\n            }\r\n            const jug = clip.name.lastIndexOf(\".\");\r\n            const nname = jug + 1 ? clip.name.substring(0, jug) : clip.name;\r\n            if (is_connect && i < clips.numItems - 1 && clip.end.seconds == clips[i + 1].start.seconds) {\r\n                stop = false;\r\n            } else {\r\n                stop = true;\r\n            }\r\n            if (stop) {\r\n                name_list.push(nname);\r\n                time_list[1].push(clip.end.seconds);\r\n            }\r\n        }\r\n    } else {\r\n        for (let i = 0; i < clips.numItems; i++) {\r\n            const clip = clips[i];\r\n            if (is_sel && !clip.isSelected()) {\r\n                continue;\r\n            }\r\n            time_list[0].push(clip.start.seconds);\r\n            const jug = clip.name.lastIndexOf(\".\") + 1;\r\n            const nname = jug ? clip.name.substring(0, jug) : clip.name;\r\n            name_list.push(nname);\r\n            time_list[1].push(clip.end.seconds);\r\n        }\r\n\r\n        if (is_connect) {\r\n            const differenceA = time_list[0].filter((v) => time_list[1].indexOf(v) === -1);\r\n            const differenceB = time_list[1].filter((v) => time_list[0].indexOf(v) === -1);\r\n            name_list = name_list.filter((v, i) => differenceA.indexOf(time_list[0][i]) + 1);\r\n            time_list = [differenceA, differenceB];\r\n        }\r\n    }\r\n\r\n    return [time_list, name_list];\r\n}\r\n\r\n\r\nfunction add_to_ame(time_list: number[][], trg_folder: Folder, name_list: string[], output_name?: string): void {\r\n    const sequence = app.project.activeSequence;\r\n\r\n    for (let i = 0; i < time_list[0].length; i++) {\r\n        const start = time_list[0][i];\r\n        const end = time_list[1][i];\r\n        sequence.setInPoint(start);\r\n        sequence.setOutPoint(end);\r\n\r\n        let out_name: string;\r\n        if (output_name) {\r\n            out_name = output_name + \"_\" + PrefixZero(i + 1, 4);\r\n        } else {\r\n            out_name = name_list[i];\r\n        }\r\n\r\n        try {\r\n            app.encoder.encodeSequence(sequence, `${trg_folder.parent.fsName}\\\\${out_name}`, path.join(yl_tools.data_path, \"\\\\MY Preset.epr\", 1, 0));\r\n        } catch (e: any) {\r\n            alert(e);\r\n        }\r\n    }\r\n}\r\n\r\nfunction PrefixZero(num: string | number, n: number): string {\r\n    return (Array(n).join(\"0\") + num).slice(-n);\r\n}\r\n\r\n\r\n","import {\r\n    helloError,\r\n    helloArrayStr,\r\n    helloObj,\r\n} from \"../utils/samples\";\r\n\r\nimport { clipsRender } from \"./batch\"\r\n\r\nexport { helloError, helloArrayStr, helloObj, helloNum, clipsRender };\r\n\r\nexport const qeDomFunction = () => {\r\n    if (typeof qe === \"undefined\") {\r\n        app.enableQE();\r\n    }\r\n    if (qe) {\r\n        qe.name;\r\n        qe.project.getVideoEffectByName(\"test\");\r\n    }\r\n};\r\n\r\nexport const helloWorld = () => {\r\n    alert(\"Hello from Premiere Pro.\");\r\n};\r\nconst helloNum = (num: number) => {\r\n    alert(\"Hello from Premiere Pro.\" + num);\r\n};\r\n\r\n\r\nexport const openProjFolder = () => {\r\n    alert(\"Open Folder\")\r\n    Folder(File(app.project.path).parent.fsName).execute();\r\n};\r\n\r\n\r\n\r\n\r\n\r\n","import {\r\n    helloError,\r\n\r\n    helloNum,\r\n    helloArrayStr,\r\n    helloObj,\r\n} from \"../utils/samples\";\r\nexport { helloError, helloNum, helloArrayStr, helloObj };\r\n\r\nexport const helloWorld = () => {\r\n    app.activeDocument;\r\n    alert(\"Hello from Photoshop\");\r\n};\r\n","// @include './lib/json2.js'\r\n\r\nimport { ns } from \"../shared/shared\";\r\n\r\nimport * as aeft from \"./aeft/aeft\";\r\nimport * as ilst from \"./ilst/ilst\";\r\nimport * as anim from \"./anim/anim\";\r\nimport * as ppro from \"./ppro/ppro\";\r\nimport * as phxs from \"./phxs/phxs\";\r\n\r\nlet main: any;\r\n\r\nswitch (BridgeTalk.appName) {\r\n    case \"premierepro\":\r\n    case \"premiereprobeta\":\r\n        main = ppro;\r\n        break;\r\n    case \"aftereffects\":\r\n    case \"aftereffectsbeta\":\r\n        main = aeft;\r\n        break;\r\n    case \"illustrator\":\r\n    case \"illustratorbeta\":\r\n        main = ilst;\r\n        break;\r\n    case \"photoshop\":\r\n    case \"photoshopbeta\":\r\n        main = phxs;\r\n        break;\r\n    default:\r\n        //@ts-ignore\r\n        if (app.appName === \"Adobe Animate\") {\r\n            main = anim;\r\n        }\r\n        break;\r\n}\r\n//@ts-ignore\r\nconst host = typeof $ !== \"undefined\" ? $ : window;\r\nhost[ns] = main;\r\n\r\nexport type Scripts = typeof aeft &\r\n    typeof ilst &\r\n    typeof anim &\r\n    typeof ppro &\r\n    typeof phxs;\r\n"],"names":["version","id","displayName","symlink","port","servePort","startingDebugPort","extensionManifestVersion","requiredRuntimeVersion","hosts","name","type","iconDarkNormal","iconNormal","iconDarkNormalRollOver","iconNormalRollOver","parameters","width","height","panels","mainPath","panelDisplayName","autoVisible","build","jsxBin","sourceMap","zxp","country","province","org","password","tsa","installModules","copyZipAssets","str","alert","SystemPath","CSInterface","xhr","console","callback","window","resEl","winVersion","winBit","result","ret","_classCallCheck","_defineProperty","exec","filteredArray","currentIndex","app","time_list","name_list","p4","stop","sequence","out_name","qe","Folder","main","host"],"mappings":";;AAIA;AACIA;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AAEQC;AACAV;AACJ;AAEIU;AACAV;AACJ;AAEIU;AACAV;AACJ;AAEIU;AACAV;AACJ;AAEIU;AACAV;AACJ;AAGJW;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AACAC;AAEAC;AAEQC;AACAV;AACAW;AACAC;AACAL;AACAC;AACJ;AAGJK;AACIC;AAAe;AACfC;;AAEJC;AACIC;AACAC;AACAC;AACAC;AACAC;AACAN;AACAD;;AAEJQ;;AAEAC;AACJ;;ACxEA;;ACDA;AACI;AACA;AACAC;AACJ;AAGA;AACIC;AACA;AACJ;AACA;AACIA;AAGA;AACJ;AACA;;;;;;AAMA;;ACfA;;;AAGA;;;;;;;;;;;ACHA;;;AAGA;;;;;;;;;;;ACXA;;AAGA;;;;;;;;;ACqLA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACAC;;AAEA;AACAA;;AAEA;AACAA;;AAEA;AACAA;;AAEA;AACAA;;AAEA;AACAA;;AAsNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC;;AAGA;AACAA;;AAIA;AACA;AACA;AACA;AACA;AACAA;AACI;;AAEJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA;;AAEQ;AACAC;;;AAGIC;AACA;;;;;AAKA;AACIC;AACJ;AACID;AACJ;;;AAGJA;AACA;AACJ;AAEA;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAF;;AAEQ;AACA;;;;;AAKI;AACAI;AACA;AACJ;;AAEAF;AACA;AACJ;AACA;AACA;AACJ;;AAEA;AACAF;AACII;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACAJ;AACI;AACA;;;;;AAKA;AACA;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA;AACI;AACIG;AACJ;;AAEJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACAH;AACI;AACA;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACAA;AACI;AACA;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACAA;AACI;;AAEA;AAEAI;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAJ;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA;AACI;;AAGA;AACA;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACAA;AACI;AACA;AAEA;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA;AACI;AACA;AACA;AACI;AACA;AACA;AACA;AACI;AACA;;AAEQ;AACA;;AAEA;;AAEIK;AACJ;AACJ;AACJ;AACJ;AACJ;AACA;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACAL;AACI;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA;AACI;;;;;;AAOYM;;AAEAA;;AAEAA;;AAEAA;;AAEAA;;AAEAA;;AAEAA;;AAEAA;AACJ;AAEA;AACIC;AACJ;AACIA;AACJ;AACJ;;AAGJ;;;AAOQC;;AAKJ;AAEA;AACJ;AAEA;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAR;AACI;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA;AACI;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA;AACI;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIA;AACI;;AAER;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA;AACII;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAJ;AACI;AACA;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA;AACI;AACI;AACJ;;AAGJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA;;AAMI;;AAEIS;AAIJ;AACA;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAT;AACI;AACI;AACJ;;AAGJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA;AACI;AACI;AACJ;;AAGJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA;;AAMIS;AAIJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACAT;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA;AACI;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA;AACI;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA;;AAEA;;ACptCA;;AAEA;AACA;AAGA;AAGA;AAGA;AAGA;AAGA;AAGA;AAGA;AAGA;AAGA;AAGA;AAGA;AAGA;AAGA;AAGA;AAGA;AAGA;AAGA;AAGA;AAGA;AAGA;AAGA;AAGA;AAGA;AAGA;AAGA;AAGA;AAGA;;;ACnFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAuBA;AACkB;AAAAU;AAAAC;AAGMA;;;;;AAK6BA;AAG7C;;AACA;AACAC;AACI;;AAEA;;AAEA;AACJ;;AAjBJ;AAoBJ;;;;;;;;AC/CA;AAQA;;;AAGQ;AACI;AACIC;AACJ;AACJ;AACA;;AAER;AACA;;AAEQ;AACA;AAEA;AACI;AACI;AACJ;AACAC;AACJ;AAEA;;AAER;AACA;;;;;;AAOQ;AACJ;;;AAGI;AACJ;AAEA;AACA;;;AAII;AACJ;AAEAC;;AAEkD;AAAjDC;AAAWC;;;AAMR;AACJ;AACA;AACIC;AACJ;;;AAGJ;AAIA;AAGI;;AAEA;AACA;;AAEI;AACJ;;AAEA;AACI;AACI;AACA;;AAEA;;AAEA;;AAEIC;AACJ;AACIA;AACJ;AACA;AACIF;;AAEJ;AACJ;AACJ;AACI;AACI;AACA;AACI;AACJ;;;AAGA;AACAA;;AAEJ;AAEA;;;;;;;;AAGsC;;AAClCD;AACJ;AACJ;AAEA;AACJ;AAGA;AACI;AAEA;;;AAGII;AACAA;AAEA;AACA;AACIC;AACJ;AACIA;AACJ;;AAGIN;;;AAGJ;AACJ;AACJ;AAEA;AACI;AACJ;;ACnJA;AACI;;AAEA;AACA;AACIO;AACAA;AACJ;AACJ;AAEA;;AAEA;AACA;AACIxB;AACJ;AAGA;;AAEIyB;AACJ;;;;;;;;;;;;;;ACtBA;AACIR;;AAEJ;;;;;;;;;;;ACFA;AAEA;AACI;AACA;AACIS;AACA;AACJ;AACA;AACIA;AACA;AACJ;AACA;AACIA;AACA;AACJ;AACA;AACIA;AACA;AACJ;AACI;AACA;AACIA;AACJ;AACA;AAAM;AAEd;AACA;AACAC"}